name: Testing

on:
  pull_request:
  push:
    branches:
      - "**"
  workflow_call:

jobs:
  Testing:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      # check-out repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # install poetry
      - name: Install poetry
        uses: ./.github/actions/python-poetry-env
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      # install requirements (including testing dependencies)
      - name: Install requirements
        run: poetry install --with test

      # run unit tests
      - name: Run unit-tests
        run: |
          set -o pipefail
          poetry run make unit-tests-cov-fail

      # add pytest coverage report to PR
      - name: Pytest coverage comment
        if: ${{ success() && github.event_name == 'pull_request' }}
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          title: Coverage Report
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: pytest.xml

      # add content to GitHub summary
      - name: Pytest coverage GitHub summary
        if: ${{ success() && github.event_name == 'pull_request' }}
        run: |
          set -o pipefail
          echo '# Coverage report' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pytest-coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '\n\n\n'
          echo '${{ steps.coverageComment.outputs.coverageHtml }}' >> $GITHUB_STEP_SUMMARY
